Source values can be given as constants or read from registers or memory.
Result can be stored in either registers or memory. Thus, the different
operand possibilities can be classified into three types.
    The first type,immediate, is for constant values.

    The second type, register, denotes the contents of one of the registers, 
    either one of the eight 32-bit registers for a double-word operation, 
    one of the eight 16-bit registers for a word operation, or one of eight
    single-byte register elements for a byte operation.

    The third type of operand is a memory reference, in which we access some
    memory location according to a computed address, often called the effective
    address.



-----------------------------------------------------------------------------
Type        Form            Operand value            Name
-----------------------------------------------------------------------------
Immediate   $Imm            Imm                      Immediate
Register    Ea              R[Ea]                    Register
Memory      Imm             M[Imm]                   Absolute
Memory      (Ea)            M[R[Ea]]                 Indirect
Memory      Imm(Eb)         M[Imm + R[Eb]]           Base + displacement
Memory      (Eb ,Ei)        M[R[Eb] + R[Ei]]         Indexed
Memory      Imm(Eb ,Ei)     M[Imm + R[Eb] + R[Ei]]   Indexed
Memory      (,Ei ,s)        M[R[Ei]*s]               Scaled indexed
Memory      Imm(,Ei ,s)     M[Imm + R[Ei]*s]         Scaled indexed
Memory      (Eb ,Ei ,s)     M[R[Eb] + R[Ei]*s]       Scaled indexed
Memory      Imm(Eb ,Ei ,s ) M[Imm + R[Eb] + R[Ei]*s] Scaled indexed
-------------------------------------------------------------------------------
Figure 3.3 Operand forms. Operands can denote immediate(constant) values, register
values, or values from memory. The scaling factor s must be either 1, 2, 4, or 8

The most general form is shown at the bottom of the table with syntax Imm(Eb,Ei,s).
Such a reference has four components: an immediate offset Imm, a base register Eb,
an index register Ei, and a scale factor s, where s mush be 1, 2, 4, or 8. The
effective address is then computed as Imm + R[Eb] + R[Ei] * s. This general form is
often seen when referencing elements of arrays. The other forms are simply special
cases of this general form where some of the components are omitted. As we will see,
the more complex addressing modes are useful when referencing array and structure
elements.

The instructions in the MOV class copy their source values to their destinations.
The source operand designates a value that is immediate, stored in a register, or
stored in memory. The destination operand designates a location that is either a
register or a memory address. IA32 imposes the restriction that a move instruction
cannot have both operands refer to memory locations -- the first to load the source
value into a register, and the second to write this register value to the destination.

Five possible combinations of source and destination types.
    movel $0x4050,%eax        Immediate--Register, 4 bytes
    movew %bp, %sp            Register--Register,  3 bytes
    moveb (%edi,%ecx), %ah    Memory--Register,    1 byte
    moveb $-17,(%esp)         Immediate--memory,   1 byte
    movel %eax, -12(%ebp)     Register--Memory,    4 bytes


Pushing a double-word value onto the stack involves first decrementing the stack pointer by
4 and then writing the value at the new top of stack address. Therefore, the behavior of
the instruction pushl %ebp is equivalent to that of the pair of instructions
    subl $4 %esp        Decrement stack pointer
    movl %ebp, (%esp)   Store %ebp on stack

Popping a double word involves reading from the top of stack location and then incrementing
the stack pointer by 4. Therefore, the instruction pop1 %eax is equivalent to the following
pair of instructions:
    movl (%esp), %eax        Read %eax from stack
    addl $4, %esp            Increment stack pointer


These placeholders are called format specifiers. Many other format specifiers
work with printf. If we have a floating-point number, we can use %f to print
out a floating-point number, decimal point and all. Other format specifiers are:
  %d - int(same as %i)
  %ld - long int (same as %li)
  %f - float
  %lf - double
  %c - char
  %s - string
  %x hexadecimal

Conditionals:
  A conditional is a statement that instructs the computer to execute a 
  certain block of code or alter certain data only if a specific condition
  has been met. The most common conditional is the If-Else statement, with
  conditional expressions and Switch-Case statements typically used as more
  shorthanded methods.

A WHILE  loop can be used to do the same thing as a FOR loop, however a FOR
loop is a more condensed way to perform a set number of repetitions since all
of the necessary information is in a one line statement.

We have some terminology to refer to functions:
  A function, call it f, that uses another function g, is said to call g.
  For example, f calls g to print the squares of ten numbers.

  A function's inputs are known as its arguments.

  A function g that gives some kind of answer back to f is said to return that
  answer.


If a function is to be called only from within the file in which it is declared,
it is appropriate to declare it as a static function. When a function is declared
static, the compiler will now compile to an object file in a way that prevents the
function from being called from code in other files.

It is usually  bad practice to define macros in headers. A macro should be defined
only when it is not possible to achieve the result with a function or some other
mechanism. Some compilers are able to optimize code to where calls to small functions
are replaced with inline code, negating any possible advantage. Using typedefs, enums,
and inline is often a better option.

The conditional expression could contain any C operator except for the assignment
operators, the increment and decrement operators, the address-of operator, and the
sizeof operator. 


3.4.3 Data Movement Example
Two features about this assembly code are worth noting. First, we see that what we
call "pointers" in C are simple addresses. Dereferencing a pointer involves copying
that pointer into a register, and then using this register in a memory reference.
Second, local variables such as x are often kept in registers rather than stored in
memory locations. Register access is much faster than memory access.

3.5 Arithmetic and Logical Operations
The operations are divided into four groups: load effective address, unary, binary,
and shifts.

-------------------------------------------------------------------------------------
Instruction        Effect        Description
-------------------------------------------------------------------------------------
leal S, D          D ← &S        Load effective address
inc D              D←D+1         Increment
dec D              D←D-1         Decrement
neg D              D ← -D        Negate
not D              D ← ~D        Complement
add S, D           D←D+S         Add
sub S, D           D←D-S         Subtract
imul S, D          D←D*S         Multiply
xor S, D           D←D^S         Exclusive-or
or S, D            D←D|S         Or
and S, D           D←D&S         And
sal k, D           D ← D << k    Left shift
shl k, D           D ← D << k    Left shift (same as sal)
sar k, D           D ← D >> Ak   Arithmetic right shift
shr k, D           D ← D >>Lk    Logical right shift
---------------------------------------------------------------------------------------

Figure 3.7 Integer arithmetic operations. The load effective address(leal) instruction
is commonly used to perform simple arithmetic. The remaining ones are more standard
unary or binary operations. We use the notation >>A and >>L to denote arithmetic and
logical right shift, respectively. Note the nonintuitive ordering of the operands with
ATT-format assembly code.

---------------------------------------------------------------------------------------
Instruction    Effect                                Description
---------------------------------------------------------------------------------------
imull    S     R[%edx]:R[%eax] ← S × R[%eax]         Signed full multiply 
mull     S     R[%edx]:R[%eax] ← S × R[%eax]         Unsigned full multiply
cltd     S     R[%edx]:R[%eax] ← SignExtend(R[%eax]) Convert to quad word

idivl    S     R[%edx] ← R[%edx]:R[%eax] mod S;      Signed divide
               R[%eax] ← R[%edx]:R[%eax] ÷ S   

divl     S     R[%edx] ← R[%edx]:R[%eax] mod S;      Unsigned divide
               R[%eax] ← R[%edx]:R[%eax] ÷ S   
---------------------------------------------------------------------------------------

Figure 3.9 Special arithmetic operations. These operations provide full 64-bit
multiplication and division, for both signed and unsigned numbers. The pair of
registers %edx and %eax are viewed as forming a single 64-bit quad word. 

IA32 also provides two different "one-operand" multiply instructions to compute the
full 64-bit product of two 32-bit values - one for unsigned (mull), and one for
two's-complement(imull) multiplication. For both of these, one argument must be in
register %eax, and the other is given as the instruction source operand. The product
is then stored in registers %edx(high-order 32 bits) and %eax(low-order 32 bits).

  
         
3.6 Control
Machine code provides two basic low-level mechanisms for implementing conditional
behavior: it tests data values and then either alters the control flow or the data
flow based on the result of these tests.

The most useful condition codes are:
  CF: Carry Flag. The most recent operation generated a carry out of the most
      significant bit. Used to detect overflow for unsigned operations.

  ZF: Zero Flag. The most recent operation yielded zero.

  SF: Sign Flag. The most recent operation yielded a negative value.

  OF: Overflow Flag. The most recent operation caused a two's-complement overflow -- either
      negative or position.   

----------------------------------------------------------------------------------------
Instruction        Based on                        Description
----------------------------------------------------------------------------------------
CMP   S2,S1        S1 - S2                         Compare
cmpb               Compare byte
cmpw               Compare word
cmpl               Compare double word

TEST  S2,S1        S1 & S2                          Test
testb              Test byte
testw              Test word
testl              Test double word
------------------------------------------------------------------------------------------

Figure 3.10 Comparison and test instructions. These instructions set the condition codes
without updating any other registers.

-----------------------------------------------------------------------------------
Instruction    Synonym    Effect                    Set condition
-----------------------------------------------------------------------------------
sete      D    setz       D <-- ZF                   Equal/ zero
setne     D    setnz      D <-- ~ZF                  Not equal/ not zero    

sets      D               D <-- SF                   Negative
setns     D               D <-- ~SF                  Nonnegative

setg      D    setnle     D <-- ~(SF ^ OF) & ~ZF     Greater (signed >)
setge     D    setnl      D <-- ~(SF ^ OF)           Greater or equal (signed >=)
setl      D    setnge     D <-- SF ^ OF              Less (signed <)
setle     D    setng      D <-- (SF ^ OF) | ZF       Less or equal (signed <=)

seta      D    setnbe     D <-- ~CF & ~ZF            Above (unsigned >)
setae     D    setnb      D <-- ~CF                  Above or equal (unsigned >=)
setb      D    setnae     D <-- CF                   Below (unsigned <)
setbe     D    setna      D <-- CF | ZF              Below or equal (unsigned <=)
------------------------------------------------------------------------------------
Figure 3.11 The SET instructions. Each instruction sets a single byte to 0 or 1 based on
some combination of the condition codes. Some instructions have "synonyms," i.e.,alternate
names for the same machine istruction.



There are three common ways of using the condition codes: (1) we can set a single byte to 0
or 1 depending on some combination of the condtion codes, (2) we can conditionally jump to
some other part of the program, or (3) we can conditionally transfer data.

-------------------------------------------------------------------------------------
Instruction            Synonym    Jump condition            Description
-------------------------------------------------------------------------------------
jmp    Label                      1                         Direct jump
jmp    *Operand                   1                         Indirection jump

je     Label           jz         ZF                        Equal/zero
jne    Label           jnz        ~ZF                       Not equal/not zero

js     Label                      SF                        Negative
jns    Label                      ~SF                       Nonnegative

jg     Label           jnle       ~(SF ^ OF) & ~ZF          Greater (singed >)
jge    Label           jnl        ~(SF ^ OF)                Greater or equal(signed >=)
jl     Label           jnge       SF ^ OF                   Less(signed <)
jle    Label           jng        (SF ^ OF) | ZF            Less or equal(signed <=)

ja     Label           jnbe       ~CF & ~ZF                 Above(unsigned >)
jae    Label           jnb        ~CF                       Above or equal(unsigned >=)
jb     Label           jnae       CF                        Below(unsigned <)
jbe    Label           jna        CF | ZF                   Below or equal (unsigned <=)
---------------------------------------------------------------------------------------
Figure 3.12 The jump instructions. These instructions jump to a labeled destination when
the jump condition holds. Some instructions have "synonyms", alternate names for the same
machine instruction.

Using goto statements is generally considered a bad programming style, since their use can
make code very difficult to read and debug.


For Loops
    for (init-expr; test-expr; update-expr)
        body-statement

    equal while loop:
    init-expr;
    while (test-expr) {
        body-statement;
        update-expr;
    }

    equal do-while loop:
    init-expr;
    if (!test-expr) {
      goto done;
    }
    do {
        body-statement;
        update-expr;
    } while(test-expr)

    done:

    equal goto code:
    init-expr;
    t = test-expr;
    if (!t) {
      goto done;
    }
    loop:
    body-statement
    update-expr;
    t = test-expr;
    if (t) {
      goto loop;
    }
    done:

----------------------------------------------------------------------------------------
Instruction        Synonym        Move condition        Description
----------------------------------------------------------------------------------------
cmove    S, R       cmovz         ZF                    Equal/zero
cmovene  S, R       cmovnz        ~ZF                   Not equal / not zero

cmovs    S, R                     SF                    Negative
cmovns   S, R                     ~SF                   Nonnegative

cmovg    S, R       cmovnle       ~(SF ^ OF) & ~ZF      Greater(signed >)
cmovge   S, R       cmovnl        ~(SF ^ OF)            Greater or equal(signed >=)
cmovl    S, R       cmovnge       SF ^ OF               Less (signed <)
cmovle   S, R       cmovng        (SF ^ OF) | ZF        Less or equal(signed <=)

cmova    S, R       cmovnbe       ~CF & ~ZF             Above (unsigned >)
cmovae   S, R       cmovnb        ~CF                   Above or equal (Usigned >=)
cmovb    S, R       cmovnae       CF                    Below (unsigned <)
cmovbe   S, R       cmovna        CF | ZF               below or equal (unsigned <=) 
-----------------------------------------------------------------------------------------

Figure 3.17 The conditional move instructions. These instructions copy the source value
S to its destination R when the move condition holds. Some instructions have "synonyms",
alternate names for the same machine instruction.



3.7 Procedures

The instruction supporting procedure calls and returns are shown in the following table:
    Instruction            Description
  call    Label            Procedure call
  call *Operand            Procedure call
  leave                    Prepare stack for return
  ret                      Return from call

By convention, registers %eax, %edx, and %ecx are classified as caller-save registers. On
the other hand, registers %ebx, %esi, and %edi are classified as callee-save registers.


Why does GCC allocate space the never gets used?
GCC adheres to an x86 programming guideline that the total stack space used by the function
should be a multiple of 16 bytes. The motivation for this convention is to ensure a proper
alignment for accessing data.



3.8 Array Allocation and Access

One unusual feature of C is that we can generate pointers to elements with in arrays and
perform arithmetric with these pointers.

For data type T and integer constant N, the declaration
T A[N];
has two effects. First. it allocates a contiguous region of L * N bytes in memory, where
L is the size of data type T. Let us denote the starting location as XA. Second, it
introduces an identifier A that can be used as a pointer to the beginning of the array.
The value of this pointer will be XA. The array elements can be accessed using an integer
index ranging between 0 and N-1. Array element i will be stored at address XA + L * i.


C allows arithmetic on pointers, where the computed value is scaled according to the size
of the data type referenced by the pointer. That is, if p is a pointer to data of type T,
and the value of p is xp, then the expression p + i has value xp + L*i, where L is the
size of data type T.

Expanding on our earlier example, suppose the starting address of integer array E and
integer index i are stored in registers %edx and %ecx, respectively.


Expression    Type    Value                Assembly code
---------------------------------------------------------------------------------------
E             int *   xE                   movl %edx, %eax
E[0]          int     M[xE]                movl (%edx), %eax
E[i]          int     M[xE + 4i]           movl (%edx, %ecx, 4), %eax
&E[2]         int *   xE + 8               leal 8(%edx), %eax
E + i -1      int *   xE + 4i - 4          leal -4(%edx, %ecx, 4), %eax
*(E + i - 3)  int *   M[xE + 4i - 12]      movl -12(%edx, %ecx, 4), %eax
&E[i] - E     int     i                    movl %ecx, %eax
----------------------------------------------------------------------------------------
In these examples, the leal instruction is used to generate an address, while movl is
used to reference memory(except in the first and last cases, where the former copies
an address and the latter copies the index). The final example shows that one can
compute the diference of two pointers within the same data structure, with the result
divided by the size of the data type.


