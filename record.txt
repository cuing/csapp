Source values can be given as constants or read from registers or memory.
Result can be stored in either registers or memory. Thus, the different
operand possibilities can be classified into three types.
    The first type,immediate, is for constant values.

    The second type, register, denotes the contents of one of the registers, 
    either one of the eight 32-bit registers for a double-word operation, 
    one of the eight 16-bit registers for a word operation, or one of eight
    single-byte register elements for a byte operation.

    The third type of operand is a memory reference, in which we access some
    memory location according to a computed address, often called the effective
    address.




Type        Form            Operand value            Name
Immediate   $Imm            Imm                      Immediate
Register    Ea              R[Ea]                    Register
Memory      Imm             M[Imm]                   Absolute
Memory      (Ea)            M[R[Ea]]                 Indirect
Memory      Imm(Eb)         M[Imm + R[Eb]]           Base + displacement
Memory      (Eb ,Ei)        M[R[Eb] + R[Ei]]         Indexed
Memory      Imm(Eb ,Ei)     M[Imm + R[Eb] + R[Ei]]   Indexed
Memory      (,Ei ,s)        M[R[Ei]*s]               Scaled indexed
Memory      Imm(,Ei ,s)     M[Imm + R[Ei]*s]         Scaled indexed
Memory      (Eb ,Ei ,s)     M[R[Eb] + R[Ei]*s]       Scaled indexed
Memory      Imm(Eb ,Ei ,s ) M[Imm + R[Eb] + R[Ei]*s] Scaled indexed

Figure 3.3 Operand forms. Operands can denote immediate(constant) values, register
values, or values from memory. The scaling factor s must be either 1, 2, 4, or 8

The most general form is shown at the bottom of the table with syntax Imm(Eb,Ei,s).
Such a reference has four components: an immediate offset Imm, a base register Eb,
an index register Ei, and a scale factor s, where s mush be 1, 2, 4, or 8. The
effective address is then computed as Imm + R[Eb] + R[Ei] * s. This general form is
often seen when referencing elements of arrays. The other forms are simply special
cases of this general form where some of the components are omitted. As we will see,
the more complex addressing modes are useful when referencing array and structure
elements.

The instructions in the MOV class copy their source values to their destinations.
The source operand designates a value that is immediate, stored in a register, or
stored in memory. The destination operand designates a location that is either a
register or a memory address. IA32 imposes the restriction that a move instruction
cannot have both operands refer to memory locations -- the first to load the source
value into a register, and the second to write this register value to the destination.

Five possible combinations of source and destination types.
    movel $0x4050,%eax        Immediate--Register, 4 bytes
    movew %bp, %sp            Register--Register,  3 bytes
    moveb (%edi,%ecx), %ah    Memory--Register,    1 byte
    moveb $-17,(%esp)         Immediate--memory,   1 byte
    movel %eax, -12(%ebp)     Register--Memory,    4 bytes


Pushing a double-word value onto the stack involves first decrementing the stack pointer by
4 and then writing the value at the new top of stack address. Therefore, the behavior of
the instruction pushl %ebp is equivalent to that of the pair of instructions
    subl $4 %esp        Decrement stack pointer
    movl %ebp, (%esp)   Store %ebp on stack

Popping a double word involves reading from the top of stack location and then incrementing
the stack pointer by 4. Therefore, the instruction pop1 %eax is equivalent to the following
pair of instructions:
    movl (%esp), %eax        Read %eax from stack
    addl $4, %esp            Increment stack pointer


These placeholders are called format specifiers. Many other format specifiers
work with printf. If we have a floating-point number, we can use %f to print
out a floating-point number, decimal point and all. Other format specifiers are:
  %d - int(same as %i)
  %ld - long int (same as %li)
  %f - float
  %lf - double
  %c - char
  %s - string
  %x hexadecimal

Conditionals:
  A conditional is a statement that instructs the computer to execute a 
  certain block of code or alter certain data only if a specific condition
  has been met. The most common conditional is the If-Else statement, with
  conditional expressions and Switch-Case statements typically used as more
  shorthanded methods.

A WHILE  loop can be used to do the same thing as a FOR loop, however a FOR
loop is a more condensed way to perform a set number of repetitions since all
of the necessary information is in a one line statement.

We have some terminology to refer to functions:
  A function, call it f, that uses another function g, is said to call g.
  For example, f calls g to print the squares of ten numbers.

  A function's inputs are known as its arguments.

  A function g that gives some kind of answer back to f is said to return that
  answer.


If a function is to be called only from within the file in which it is declared,
it is appropriate to declare it as a static function. When a function is declared
static, the compiler will now compile to an object file in a way that prevents the
function from being called from code in other files.

It is usually  bad practice to define macros in headers. A macro should be defined
only when it is not possible to achieve the result with a function or some other
mechanism. Some compilers are able to optimize code to where calls to small functions
are replaced with inline code, negating any possible advantage. Using typedefs, enums,
and inline is often a better option.

The conditional expression could contain any C operator except for the assignment
operators, the increment and decrement operators, the address-of operator, and the
sizeof operator. 


3.4.3 Data Movement Example
Two features about this assembly code are worth noting. First, we see that what we
call "pointers" in C are simple addresses. Dereferencing a pointer involves copying
that pointer into a register, and then using this register in a memory reference.
Second, local variables such as x are often kept in registers rather than stored in
memory locations. Register access is much faster than memory access.

3.5 Arithmetic and Logical Operations
The operations are divided into four groups: load effective address, unary, binary,
and shifts.

Instruction        Effect        Description
leal S, D          D ← &S        Load effective address
inc D              D←D+1         Increment
dec D              D←D-1         Decrement
neg D              D ← -D        Negate
not D              D ← ~D        Complement
add S, D           D←D+S         Add
sub S, D           D←D-S         Subtract
imul S, D          D←D*S         Multiply
xor S, D           D←D^S         Exclusive-or
or S, D            D←D|S         Or
and S, D           D←D&S         And
sal k, D           D ← D << k    Left shift
shl k, D           D ← D << k    Left shift (same as sal)
sar k, D           D ← D >> Ak   Arithmetic right shift
shr k, D           D ← D >>Lk    Logical right shift

Figure 3.7 Integer arithmetic operations. The load effective address(leal) instruction
is commonly used to perform simple arithmetic. The remaining ones are more standard
unary or binary operations. We use the notation >>A and >>L to denote arithmetic and
logical right shift, respectively. Note the nonintuitive ordering of the operands with
ATT-format assembly code.


Instruction    Effect                                Description
imull    S     R[%edx]:R[%eax] ← S × R[%eax]         Signed full multiply 
mull     S     R[%edx]:R[%eax] ← S × R[%eax]         Unsigned full multiply
cltd     S     R[%edx]:R[%eax] ← SignExtend(R[%eax]) Convert to quad word

idivl    S     R[%edx] ← R[%edx]:R[%eax] mod S;      Signed divide
               R[%eax] ← R[%edx]:R[%eax] ÷ S   

divl     S     R[%edx] ← R[%edx]:R[%eax] mod S;      Unsigned divide
               R[%eax] ← R[%edx]:R[%eax] ÷ S   

Figure 3.9 Special arithmetic operations. These operations provide full 64-bit
multiplication and division, for both signed and unsigned numbers. The pair of
registers %edx and %eax are viewed as forming a single 64-bit quad word. 

IA32 also provides two different "one-operand" multiply instructions to compute the
full 64-bit product of two 32-bit values - one for unsigned (mull), and one for
two's-complement(imull) multiplication. For both of these, one argument must be in
register %eax, and the other is given as the instruction source operand. The product
is then stored in registers %edx(high-order 32 bits) and %eax(low-order 32 bits).

  
         
   
         
